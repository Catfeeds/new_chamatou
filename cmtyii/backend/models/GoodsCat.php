<?php
/**
 * Created by PhpStorm.
 * User: angkebrand
 * Date: 2017/4/26
 * Time: 18:42
 */

namespace backend\models;


use yii\db\ActiveRecord;

class GoodsCat extends ActiveRecord
{
    
    public static function tableName()
    {
        return '{{%goods_cate}}';
    }
    public function rules()
    {
//        return parent::rules();  TODO: Change the autogenerated stub
        return [
            [['cate_name'],'required'],
            [['pid'],'integer'],
        ];
    }
    
    public function attributeLabels()
    {
       // return parent::attributeLabels(); // TODO: Change the autogenerated stub
        return [
            'cate_name' =>  '分类名称',
            'pid'      =>  '父级分类',
            'id'       =>  'ID',
        ];
    }

    /**
     * 获取所有的分类
     * @return array|\yii\db\ActiveRecord[]
     */
    public function getCate()
    {
        $cates = $this->find()->asArray()->all();
        //$cates = $this->category($cates);  因为不考虑无限极分类  所以暂时不用
        return $cates;
    }

    /**
     * 将所有分类重新构造一个已id为键name为值的一维数组  方便商品添加的时候选择使用
     */
    public function arrCat()
    {
        $arrCat = [];
        $data    =  $this->getCate();
        $arrCat[0]  =  '所有分类';
        foreach ($data as $v){
            $arrCat[$v['id']] = $v['cate_name'];
        }
        return $arrCat;
    }
    
    //没有用到无限极分类  未使用
    public function category($arr,$pid=0,$level=0)
    {
        //定义一个静态变量，存储一个空数组，用静态变量，是因为静态变量不会被销毁，会保存之前保留的值，普通变量在函数结束时，会死亡，生长周期函数开始到函数结束，再次调用重新开始生长
        //保存一个空数组
        static $list = array();
        //通过遍历查找是否属于顶级父类，pid=0为顶级父类，
        foreach ($arr as $value) {
            //进行判断如果pid=0，那么为顶级父类，放入定义的空数组里
            if ($value['pid'] == $pid) {
                //添加空格进行分层
                $value['level'] = $level;
               // $value['cate_name'] = str_repeat('&nbsp;',$level).$value['cate_name'];
                $list[] = $value;
                //递归点，调用自身，把顶级父类的主键id作为父类进行再调用循环，空格+1
                self::category($arr, $value['id'], $level + 1);
            }
        }
        return $list;//递归出口
    }
}