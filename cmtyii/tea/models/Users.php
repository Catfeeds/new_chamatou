<?php

namespace tea\models;

use Yii;
use yii\web\IdentityInterface;

/**
 * This is the model class for table "{{%sp_users}}".
 *
 * @property integer $id
 * @property integer $shoper_id
 * @property string $user
 * @property string $phone
 * @property string $add_time
 * @property string $password
 * @property integer $is_admin
 * @property integer $status
 * @property integer $store_id
 */
class Users extends \yii\db\ActiveRecord implements IdentityInterface
{
    private $modelLangu = [] ;

    private $userLangu  = [];


    /**
     * 初始化语言包
     */
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        Yii::$app->language = 'zh-cn';
        $this->modelLangu = Yii::t('app','model');
        $this->userLangu  = Yii::t('app','user');
    }

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%sp_users}}';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['phone','password'],'required','message'=>$this->userLangu['null'],'on'=>['login']],
            [['password'],'validatePassword', 'on'=>['login'] ],
            [['phone'],'validateShoper','on'=>['login']],
            [['status'],'validateUserStatus','on'=>['login']]
        ];
    }

    /**
     * 判断用户名密码是否正确
     * @param $attribute
     * @param $params
     * @return bool
     */
    public function validatePassword($attribute, $params)
    {
        if(!$this->hasErrors())
        {
            $user = $this->getByPhone($this->phone);
            if($user)
            {
                if($user->password == $this->setPassword($this->password))
                {
                    $this->shoper_id = $user->shoper_id;
                    $this->id        = $user->id ;
                    $this->is_admin  = $user->is_admin;
                    $this->status    = $user->status;
                    $this->store_id  = $user->store_id;
                    $this->is_admin  = $user->is_admin;
                    return true;
                }
                $this->addError($attribute,$this->userLangu['password']);
            }
            $this->addError($attribute,$this->userLangu['phone']);
        }
    }

    /**
     * 判断商家是否存在/商家是否为冻结状态
     * @param $attribute
     * @param $params
     * @return bool
     */
    public function validateShoper($attribute,$params)
    {
        if (!$this->hasErrors())
        {
            $shoper = $this->getShoper();
            if($shoper)
            {
                return true;
            }
            $this->addError($attribute,$this->userLangu['shoper_null']);
        }
    }

    /**
     * 判断用户状态/是否能登录
     * @param $attribute
     * @param $params
     */
    public function validateUserStatus($attribute,$params)
    {
        if (!$this->hasErrors())
        {
            if($this->status == 1)
            {
                $this->addError($attribute,$this->userLangu['user_status']);
            }
        }
    }
    /**
     * 通过手机号查询用户
     * @param string $phone 用户的手机号码
     * @return array|null|\yii\db\ActiveRecord 会员的模型
     */
    public function getByPhone($phone = '')
    {
        $user = self::find()
                    ->select(['id', 'phone', 'user', 'password','shoper_id','status','store_id','is_admin'])
                    ->where('phone = :phone', [':phone' => $phone])
                    ->one();
        return $user;
    }

    /**
     * 关联查询Shoper数据表
     * @return \yii\db\ActiveQuery|array
     */
    public function getShoper()
    {
        $data = $this->hasOne(Shoper::className(),['id'=>'shoper_id'])
                     ->select(['id'])
                     ->one();
        return $data;
    }

    /**
     * 设置用户加密函数
     * @param $password
     * @return string
     */
    protected function setPassword($password)
    {
        return md5($password);
    }
    /**
     * 用户登录操作
     * @param $data array
     * @return bool|array
     */
    public function login($data)
    {
       $this->scenario = 'login';
       if($this->load($data,'') && $this->validate())
       {
           if(!$this->hasErrors())
           {
                $userSessionData['tea_user_id'] = $this->id;
                $userSessionData['is_admin'] = $this->is_admin;
                $userSessionData['shoper_id']   = $this->shoper_id;
                $userSessionData['store_id']   = $this->store_id;
                $sesstion = new Session();
                $sesstion->teaLogin($userSessionData);
                Yii::$app->user->login($this);
                return true;
           }
       }
        return false;
    }

    /**
     * Finds an identity by the given ID.
     * @param string|int $id the ID to be looked for
     * @return IdentityInterface the identity object that matches the given ID.
     * Null should be returned if such an identity cannot be found
     * or the identity is not in an active state (disabled, deleted, etc.)
     */
    public static function findIdentity($id)
    {
        return self::findOne($id);
        // TODO: Implement findIdentity() method.
    }

    /**
     * Finds an identity by the given token.
     * @param mixed $token the token to be looked for
     * @param mixed $type the type of the token. The value of this parameter depends on the implementation.
     * For example, [[\yii\filters\auth\HttpBearerAuth]] will set this parameter to be `yii\filters\auth\HttpBearerAuth`.
     * @return IdentityInterface the identity object that matches the given token.
     * Null should be returned if such an identity cannot be found
     * or the identity is not in an active state (disabled, deleted, etc.)
     */
    public static function findIdentityByAccessToken($token, $type = null)
    {
        // TODO: Implement findIdentityByAccessToken() method.
    }

    /**
     * Returns an ID that can uniquely identify a user identity.
     * @return string|int an ID that uniquely identifies a user identity.
     */
    public function getId()
    {
        return $this->id;
        // TODO: Implement getId() method.
    }

    /**
     * Returns a key that can be used to check the validity of a given identity ID.
     *
     * The key should be unique for each individual user, and should be persistent
     * so that it can be used to check the validity of the user identity.
     *
     * The space of such keys should be big enough to defeat potential identity attacks.
     *
     * This is required if [[User::enableAutoLogin]] is enabled.
     * @return string a key that is used to check the validity of a given identity ID.
     * @see validateAuthKey()
     */
    public function getAuthKey()
    {
        // TODO: Implement getAuthKey() method.
    }

    /**
     * Validates the given auth key.
     *
     * This is required if [[User::enableAutoLogin]] is enabled.
     * @param string $authKey the given auth key
     * @return bool whether the given auth key is valid.
     * @see getAuthKey()
     */
    public function validateAuthKey($authKey)
    {
        // TODO: Implement validateAuthKey() method.
    }
}
