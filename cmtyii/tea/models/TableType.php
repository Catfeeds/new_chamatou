<?php

namespace tea\models;

use Yii;

/**
 * This is the model class for table "{{%sp_table_type}}".
 *
 * @property integer $id
 * @property integer $shoper_id
 * @property string $cate_name
 * @property integer $type
 * @property string $price
 * @property integer $hour
 * @property string $deposit
 * @property integer $classification
 * @property integer $store_id
 */
class TableType extends \yii\db\ActiveRecord
{
    private $tableLangu = [];
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->tableLangu = Yii::t('app','table');

    }

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%sp_table_type}}';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['shoper_id', 'type', 'hour', 'classification','store_id'],'integer','on' => ['add', 'edit'],'message' => $this->tableLangu['param_type_error']],
            [['price', 'deposit'],'number','on' => ['add', 'edit'],'message' => $this->tableLangu['param_type_error']],
            [['cate_name'],'required','on' => ['add', 'edit'],'message' => $this->tableLangu['table_type_name_null']],
            [['type'],'in', 'range'=>[1,2,3],'on'=>['add','edit']],
            ['cate_name','validateCateNameByAdd','on'=>'add'],
            ['cate_name','validateCateNameByEdit','on'=>'edit'],
            ['id','validateDeleteId','on'=>'del']
        ];
    }

    /**
     * 添加新台座时判断是否存在台座类型名称
     * @param $attribute
     * @param $params
     * @return bool
     */
    public function validateCateNameByAdd($attribute, $params)
    {
        if(!$this->hasErrors())
        {
            if ($this->getByCateName($this->cate_name, ['id']))
            {
                $this->addError($attribute,$this->tableLangu['table_type_name_exist']);
            }
            return true;
        }
    }

    /**
     * 修改台座时判断是否存在台座类型名称
     * @param $attribute
     * @param $params
     * @return bool
     */
    public function validateCateNameByEdit($attribute, $params)
    {
        if(!$this->hasErrors())
        {
            $tableTypeData = $this->getByCateName($this->cate_name, ['id','shoper_id']);
            if ($tableTypeData)
            {
                if($this->shoper_id == $tableTypeData->shoper_id && $this->id == $tableTypeData->id )
                {
                    return true;
                }
                $this->addError($attribute,$this->tableLangu['table_type_name_exist']);
            }
            return true;
        }
    }

    /**
     * 删除分类检验的操作
     * @param $attribute
     * @param $params
     */
   public function validateDeleteId($attribute,$params)
   {
        if(!$this->hasErrors())
        {
            if($this->getTableAR(['id']))
            {
                $this->addError($attribute,$this->tableLangu['del_table_to_table']);
            }
        }
   }

    /**
     * 判断台座是否存在
     * @param int $tableTypeId 台桌类型的ID
     * @return bool
     */
    public function isExistTableType($tableTypeId = 0)
    {
        if($this->getById($tableTypeId))
        {
            return true;
        }
        return false;
    }

    /**
     * 通过用户名查询桌台分类信息
     * @param string $cateName 分类名称
     * @param array $select 返回的字段
     * @return array|null|\yii\db\ActiveRecord
     */
    public function getByCateName($cateName ='',$select = [])
    {
        return self::find()->select($select)
                           ->where('cate_name = :cate_name and shoper_id = :shoper_id and store_id = :store_id', [
                                        ':cate_name'=>$cateName,
                                        ':shoper_id'=>Yii::$app->session->get('shoper_id'),
                                        ':store_id'=>Yii::$app->session->get('store_id')
                            ])->one();
    }

    /**
     * 根据台桌类型的ID查着台桌
     * @param int $tableTypeId 台桌类型的ID
     * @return static
     */
    public function getById($tableTypeId =0)
    {
        return self::findOne($tableTypeId);
    }

    /**
     * 关联查询台座数据
     * @param array $select
     * @return array|\yii\db\ActiveRecord[]
     */
    public function getTableAR($select =[])
    {
        return self::hasMany(Table::className(),['type_id'=>'id'])->select($select)->all();
    }
    /**
     * 关联查询台座数据
     * @param array $select
     * @return array|\yii\db\ActiveRecord[]
     */
    public function getTable($select =[])
    {
        return self::hasMany(Table::className(),['type_id'=>'id'])->select($select)->asArray()->all();
    }
    /**
     * 添加台桌类型的操作
     * @param $data
     * @return bool
     */
    public function addTableType($data)
    {
        $this->scenario = 'add';
        if ($this->load($data, '') && $this->validate())
        {
            $this->shoper_id = Yii::$app->session->get('shoper_id');
            $this->store_id  = Yii::$app->session->get('store_id');
            if (!$this->hasErrors())
            {
                return $this->save();
            }
        }
        return false;
    }
    /**
     * 修改台桌类型的操作
     * @param $data
     * @return bool
     */
    public function editTableType($data)
    {
        $this->scenario = 'edit';
        if($this->load($data,''))
        {
            if($this->save())
            {
                return true;
            }
        }
    }
    /**
     * 删除台桌类型的操作
     * @param $data
     * @return bool
     */
    public function delTableType()
    {
        $this->scenario = 'del';
        if($this->validate() && $this->delete())
        {
            return true;
        }
        return false;
    }


}
